import java.awt.event.MouseListener;
import java.awt.event.MouseEvent;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Toolkit;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import javax.swing.Timer;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Random;

import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.imageio.*;
import java.awt.image.*;
import java.io.*;

public class TicTacToeBoard extends JPanel implements Runnable, MouseListener
{
    boolean ingame = true;
    private Dimension d;
    int BOARD_WIDTH=500;
    int BOARD_HEIGHT=500;
    BufferedImage img;
    String message = "Click Board to Start";
    private Thread animator;

    int x = 0;
    int y = 0;
    int xCell = 0;
    int yCell = 0;
    int turn = 0;
    String str = "";
    int win = 0;

    int[][] board = new int[3][3];

    public TicTacToeBoard() {
        addKeyListener(new TAdapter());
        addMouseListener(this);
        setFocusable(true);
        setBackground(Color.white);
        if (animator == null || !ingame) {
            animator = new Thread(this);
            animator.start();
        }
        setDoubleBuffered(true);
    }

    public void paint(Graphics g) {
        super.paint(g);
        Font small = new Font("Serif", Font.BOLD, 18);
        Font medium = new Font("Serif", Font.BOLD, 22);
        Font big = new Font("Serif", Font.BOLD, 30);
        Font bigger = new Font("Serif", Font.BOLD, 40);

        g.setFont(medium);
        g.drawString(str, 10, 10);

        //draw grid
        g.setColor(Color.black);
        g.drawLine(200, 0, 200, 600);
        g.drawLine(400, 0, 400, 600);
        g.drawLine(0, 200, 600, 200);
        g.drawLine(0, 400, 600, 400);

        //draw shapes
        for (int i = 0; i < board.length; i++) { //i = row
            for (int j = 0; j < board[0].length; j++) { //j = col
                if (board[i][j] == 1) { //o's
                    g.setColor(Color.black);
                    g.drawOval(i * 200 + 10, j * 200 + 10, 180, 180);
                } else if (board[i][j] == 2) { //x's
                    g.setColor(Color.black);
                    g.drawLine(i * 200,       j * 200, i * 200 + 200, j * 200 + 200);
                    g.drawLine(i * 200 + 200, j * 200, i * 200,       j * 200 + 200);
                }
            }
        }

        Toolkit.getDefaultToolkit().sync();
        g.dispose();
    }

    private class TAdapter extends KeyAdapter {
        public void keyReleased(KeyEvent e) {
            int key = e.getKeyCode();
        }

        public void keyPressed(KeyEvent e) {
            int key = e.getKeyCode();
        }

    }

    public void mousePressed(MouseEvent e) {
        x = e.getX();
        y = e.getY();
        xCell = (int)(x / 200.0);
        yCell = (int)(y / 200.0);

        str = "(" + xCell + ", " + yCell + ")";
        if (turn % 2 == 0) { //even --> player 1
            if (board[xCell][yCell] == 0) {
                board[xCell][yCell] = 1;
                turn++;
            }
        } else { //odd --> player 2
            if (board[xCell][yCell] == 0) {
                board[xCell][yCell] = 2;
                turn++;
            }
        }
    }

    public void mouseReleased(MouseEvent e) {

    }

    public void mouseEntered(MouseEvent e) {

    }

    public void mouseExited(MouseEvent e) {

    }

    public void mouseClicked(MouseEvent e) {

    }

    public void run() {
        long beforeTime, timeDiff, sleep;
        beforeTime = System.currentTimeMillis();
        int animationDelay = 500;
        long time = System.currentTimeMillis();
        while (true) {//infinite loop
            // spriteManager.update();
            repaint();
            try {
                time += animationDelay;
                Thread.sleep(Math.max(0,time - System.currentTimeMillis()));
            }catch (InterruptedException e) {
                System.out.println(e);
            }//end catch
        }//end while loop
    }//end of run

    public int checkWin() {

        for (int i = 0; i < board.length; i++) {
            //horizontal
            if (board[i][0] == 1 && board[i][1] == 1 && board[i][2] == 1) {
                return 1;
            } 
            if (board[i][0] == 2 && board[i][1] == 2 && board[i][2] == 2) {
                return 2;
            }
            
            //vertical
            if (board[0][i] == 1 && board[1][i] == 1 && board[2][i] == 1) {
                return 1;
            } 
            if (board[0][i] == 2 && board[1][i] == 2 && board[2][i] == 2) {
                return 2;
            } 
        }
        
        //diagonal right
        
        
        //diagonal left
        
        
        return 0;
    }
}//end of class
